#!/usr/bin/env ruby
# -*- mode: ruby -*-
#
#    Copyright (c)2012,2017 Shigeya Suzuki
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

require 'optparse'
require 'nokogiri'
require 'zlib'
require 'zip'
require 'stringio'

module OmniOutliner

  # Common Classes
  class ParseContext
    attr_accessor :parent, :name, :attrs, :column, :lit, :item, :style, :root, :str, :id, :is_root

    def initialize(parent, name, attrs_a)
      @parent = parent
      @name = name
      @column = @lit = @item = @style = @root = @is_root = false
      @id = nil
      @str = ""

      @attrs = {}
      if attrs_a.size != 0
        attrs_a.each {|k,v| @attrs[k] = v}
        @id = @attrs["id"] if @attrs.has_key?("id")
        @is_root = @attrs["is-root"] if @attrs.has_key?("is-root")
      end
    end

    def start_element(name, attrs)
      @column = name == "column"
      @item = name == "item"
      @style = name == "style"
      @lit = name == "lit"
      @root = name == "root"
      if name == "cell"
        # if it is a hyperlink, use name part as part of output
        @str += @attrs["name"] if @attrs.has_key?("name")
      end
    end

    def end_element(name)
      if name == "lit"
        @str += "\n" if in_body_text
      end
      if name == "values"
        @str.gsub(/\n/, '')
      end
    end

    def in_body_text
      if @item
        true
      elsif @style || @column
        false
      else
        if @in_body_text == nil
          @in_body_text = @parent.nil? ? false : @parent.in_body_text
        end
        @in_body_text
      end
    end

    def characters(s)
      @str += s if @lit && in_body_text
    end

    def elevate(context)
      @str += context.str
    end
  end

  class DocumentCommon < Nokogiri::XML::SAX::Document
    def initialize
      @contexts = []
      @context = nil
      super
    end

    def push_context(name, attrs)
      @contexts.push(@context)
      @context = ParseContext.new(@context, name, attrs)
    end

    def pop_context
      old_context = @context
      @context = @contexts.pop
      @context.elevate(old_context) if @context
    end

    def start_element(name, attrs)
      push_context(name, attrs)
      @context.start_element(name, attrs)
    end

    def end_element(name)
      final_output if name == "outline"
      @context.end_element(name)
      pop_context
    end

    def characters(s)
      @context.characters(s)
    end

    def final_output
    end
  end

  # Version Dependent Classes for V3
  #
  # Format Documenatation can be found at:
  # https://www.omnigroup.com/namespace/OmniOutliner/xmloutline-v3.dtd
  class V3
    class Document < DocumentCommon
      def final_output
        puts @context.str
      end
    end

    class Parser < Nokogiri::XML::SAX::Parser
      def initialize(fn)
        @file = nil
        if fn =~ /\.oo3$/
          fn = "#{fn}/contents.xml"
          begin
            @file = Zlib::GzipReader.new(File.open(fn))
          rescue Zlib::GzipFile::Error
            @file = File.open(fn)
          end
        else
          @file = File.open(fn)
        end
        super(Document.new)
      end

      def parse
        super(@file)
      end
    end
  end

  # Version Dependent Classes for V5
  #
  # Format Documenatation can be found at:
  # https://www.omnigroup.com/namespace/OmniOutliner/xmloutline-v5.rng
  # https://www.omnigroup.com/namespace/OmniOutliner/xmloutline-editors-v1.rng
  class V5
    class Item
      attr_reader :attrs
      attr_accessor :is_root

      def initialize(attrs, text)
        @attrs = attrs
        @text = text
        @children = {}
      end

      def add(rank, item)
        rank = "0" if rank.nil? || rank == ""
        @children[rank.hex] = item
      end

      def print_all
        puts @text unless @is_root
        @children.keys.sort.each {|k| @children[k].print_all}
      end
    end

    class Document < DocumentCommon
      def initialize
        @items = {}
        super
      end

      def end_element(name)
        if name == "item"
          str = @context.str
          str.gsub(/\n/, '')
          @items[@context.id] = Item.new(@context.attrs, str)
          @context.str = ""
        end
        super
      end

      def final_output
        @items.each do |id, item|
          if item.attrs["is-root"] == "yes"
            @root = item
            @root.is_root = true
          elsif pid = item.attrs["parent-id"]
            @items[pid].add(item.attrs["rank"], item)
          else
            @root.add(item.attrs["rank"], item)
          end
        end
        @root.print_all #unless @root.nil?
      end
    end

    class Parser < Nokogiri::XML::SAX::Parser
      def initialize(fn)
        @file = nil
        if fn =~ /\.ooutline$/
          begin
            @contents = nil
            @editors = nil
            Zip::File.open(fn) do |file|
              @contents = file.read("contents.xml")
              @editors = file.read("editors.xml")
            end
            @file = StringIO.new(@contents) if @contents
          rescue Zlib::GzipFile::Error
            @file = ""
          end
        end
        super(Document.new)
      end

      def parse
        super(@file) if @file
      end
    end
  end # v3
end

ARGV.options do |o|
  o.banner = "ruby #{$0} [options] OmniOutliner-Document-Package"
  o.separator "Options:"
  o.parse!
end

ARGV.each do |file|
  if file =~ /\.oo3/
    parser = OmniOutliner::V3::Parser.new(file)
  elsif file =~ /\.ooutline/
    parser = OmniOutliner::V5::Parser.new(file)
  else
    STDERR.puts "Can't open #{file}"
    exit 1
  end
  parser.parse
end
